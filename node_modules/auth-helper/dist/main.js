import dayjs from 'dayjs';

class AuthHelper {
    static setKeys(params) {
        if (params &&
            params.tokenKey &&
            params.infoKey &&
            params.tokenKey.toString() === params.infoKey.toString()) {
            throw new Error("Can not set same keys!");
        }
        if (params && params.tokenKey) {
            if (!params.infoKey && params.tokenKey === this.infoKey) {
                throw new Error("Can not set same keys!");
            }
            this.AUTH_TOKEN = params.tokenKey;
        }
        if (params && params.infoKey) {
            if (!params.tokenKey && params.infoKey === this.tokenKey) {
                throw new Error("Can not set same keys!");
            }
            this.AUTH_INFO = params.infoKey;
        }
    }
    static get tokenKey() {
        return this.AUTH_TOKEN;
    }
    static get infoKey() {
        return this.AUTH_INFO;
    }
    /**
     * setToken
     */
    static setToken(tokenData) {
        tokenData.expire = dayjs()
            .add(tokenData.expires_in, "second")
            .toDate();
        localStorage.setItem(this.AUTH_TOKEN, JSON.stringify(tokenData));
    }
    /**
     * setUser
     */
    static setAuthData(authData) {
        localStorage.setItem(this.AUTH_INFO, JSON.stringify(authData));
    }
    /**
     * clearAuthState
     */
    static clearAuthState() {
        localStorage.removeItem(this.AUTH_TOKEN);
        localStorage.removeItem(this.AUTH_INFO);
    }
    static getAuthState() {
        let token = undefined, authData = undefined, isLogin = false, auth = undefined, data = undefined;
        if ((auth = localStorage.getItem(this.AUTH_TOKEN))) {
            token = JSON.parse(auth);
            if (token !== undefined && token.hasOwnProperty("expire")) {
                token.expire = dayjs(token.expire).toDate();
            }
            if ((data = localStorage.getItem(this.AUTH_INFO))) {
                authData = JSON.parse(data);
            }
            if (token !== undefined && token.access_token) {
                isLogin = true;
            }
        }
        return { token, authData, isLogin };
    }
    static isExpired(params) {
        if (!params || !params.expire)
            return true;
        const current = dayjs();
        return current.isAfter(dayjs(params.expire).subtract(1, "minute"));
    }
}
AuthHelper.AUTH_TOKEN = "USER_AUTH_TOKEN";
AuthHelper.AUTH_INFO = "USER_AUTH_INFO";

export default AuthHelper;
