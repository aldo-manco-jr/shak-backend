import dayjs from "dayjs";
interface ITokenData {
  access_token: string;
  token_type: string;
  refresh_token?: string;
  expires_in: number;
  scope?: string;
  expire?: Date;
}

interface IAuthData {
  token: ITokenData | undefined;
  authData: object | undefined;
  isLogin: boolean;
}

class AuthHelper {
  private static AUTH_TOKEN: string = "USER_AUTH_TOKEN";
  private static AUTH_INFO: string = "USER_AUTH_INFO";

  public static setKeys(params?: {
    tokenKey?: string;
    infoKey?: string;
  }): void {
    if (
      params &&
      params.tokenKey &&
      params.infoKey &&
      params.tokenKey.toString() === params.infoKey.toString()
    ) {
      throw new Error("Can not set same keys!");
    }
    if (params && params.tokenKey) {
      if (!params.infoKey && params.tokenKey === this.infoKey) {
        throw new Error("Can not set same keys!");
      }
      this.AUTH_TOKEN = params.tokenKey;
    }
    if (params && params.infoKey) {
      if (!params.tokenKey && params.infoKey === this.tokenKey) {
        throw new Error("Can not set same keys!");
      }
      this.AUTH_INFO = params.infoKey;
    }
  }

  static get tokenKey() {
    return this.AUTH_TOKEN;
  }

  static get infoKey() {
    return this.AUTH_INFO;
  }

  /**
   * setToken
   */
  public static setToken(tokenData: ITokenData): void {
    tokenData.expire = dayjs()
      .add(tokenData.expires_in, "second")
      .toDate();
    localStorage.setItem(this.AUTH_TOKEN, JSON.stringify(tokenData));
  }

  /**
   * setUser
   */
  public static setAuthData(authData: object): void {
    localStorage.setItem(this.AUTH_INFO, JSON.stringify(authData));
  }

  /**
   * clearAuthState
   */
  public static clearAuthState(): void {
    localStorage.removeItem(this.AUTH_TOKEN);
    localStorage.removeItem(this.AUTH_INFO);
  }

  public static getAuthState(): IAuthData {
    let token: ITokenData | undefined = undefined,
      authData: object | undefined = undefined,
      isLogin = false,
      auth = undefined,
      data = undefined;
    if ((auth = localStorage.getItem(this.AUTH_TOKEN))) {
      token = JSON.parse(auth);
      if (token !== undefined && token.hasOwnProperty("expire")) {
        token.expire = dayjs(token.expire).toDate();
      }
      if ((data = localStorage.getItem(this.AUTH_INFO))) {
        authData = JSON.parse(data);
      }
      if (token !== undefined && token.access_token) {
        isLogin = true;
      }
    }
    return { token, authData, isLogin };
  }

  public static isExpired(params: ITokenData): boolean {
    if (!params || !params.expire) return true;
    const current = dayjs();
    return current.isAfter(dayjs(params.expire).subtract(1, "minute"));
  }
}

export default AuthHelper;
